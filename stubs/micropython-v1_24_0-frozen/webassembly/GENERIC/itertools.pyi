from _typeshed import Incomplete
from collections.abc import Generator

def count(start: int = 0, step: int = 1) -> Generator[Incomplete, None, None]: ...
def cycle(p) -> Generator[Incomplete, Incomplete, None]: ...
def repeat(el, n: Incomplete | None = None) -> Generator[Incomplete, None, None]: ...
def chain(*p) -> Generator[Incomplete, Incomplete, None]: ...
def islice(p, start, stop=(), step: int = 1) -> Generator[Incomplete, None, None]: ...
def tee(iterable, n: int = 2): ...
def starmap(function, iterable) -> Generator[Incomplete, None, None]: ...
def accumulate(iterable, func=...) -> Generator[Incomplete, None, Incomplete]: ...
